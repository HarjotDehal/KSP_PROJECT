import express from "express";
import {
  getProducts,
  getCustomers,
  getTransactions,
  getGeography,
  createLoad,
  updateLoad,
  deleteLoad
} from "../controllers/client.js";

const router = express.Router();

router.get("/products", getProducts);
router.get("/customers", getCustomers);
router.get("/transactions", getTransactions);
router.get("/geography", getGeography);

router.post('/loads', createLoad);


// router.put('/loads/:loadId',updateLoad)


// router.delete('/loads:loadId', deleteLoad)
router.delete('/loads/delete',deleteLoad)

// router.patch('/loads/:loadId',updateLoad)




export default router;





Now the controller 


import Product from "../models/Product.js";
import ProductStat from "../models/ProductStat.js";
import User from "../models/User.js";
import Transaction from "../models/Transaction.js";
import getCountryIso3 from "country-iso-2-to-3";

export const getProducts = async (req, res) => {
  try {
    const products = await Product.find();

    const productsWithStats = await Promise.all(
      products.map(async (product) => {
        const stat = await ProductStat.find({
          productId: product._id,
        });
        return {
          ...product._doc,
          stat,
        };
      })
    );
    // console.log('hi');
    // print('bitch')

    res.status(200).json(productsWithStats);


  } catch (error) {
    res.status(404).json({ message: error.message });
  }
};



export const getCustomers = async (req, res) => {
  try {
    const customers = await User.find({ role: "user" }).select("-password");
    res.status(200).json(customers);
  } catch (error) {
    res.status(404).json({ message: error.message });
  }
};

export const deleteLoad = async (req, res) => {
  try {
    const { _id, CompanyName, loadNumber, loadPrice, loadPickup, loadDropoff, loadLumper, loadBOL, loadInvoice,BOLPDF } = req.body;

    // Perform any necessary validation or authorization checks before deleting
    // console.log('hidelete');
    // console.log(loadId);

    
    // we just need this value to actually equal the loads ID. 
    // console.log(_id);
    await Product.findByIdAndDelete(_id);

    res.json({ message: "Load deleted successfully" });
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "Internal server error" });
  }
};



export const createLoad = async (req, res) => {
  try {
    // Get the load data from the request body
    const { CompanyName, loadNumber, loadPrice, loadPickup, loadDropoff, loadLumper, loadBOL, loadInvoice,BOLPDF } = req.body;

    // Create a new load instance using the load model
    const newProduct = new Product({
      CompanyName,
      loadNumber,
      loadPrice,
      loadPickup,
      loadDropoff,
      loadLumper,
      loadBOL,
      loadInvoice,
      // BOLPDF,
    });



    // Save the new load to the database
    await newProduct.save();

    // Send the saved load as the response with status 201 (Created)
    res.status(201).json(newProduct);
  } catch (error) {
    console.log(error);
    // Handle error
    res.status(500).json({ error: 'Internal server error' });
  }
};

// export const updateLoad = async (req, res) => {

//   console.log('hiii');

//   try {
// console.log('hiii');
    
//     const {id_, CompanyName, loadNumber, loadPrice, loadPickup, loadDropoff, loadLumper, loadBOL, loadInvoice } = req.body;

//     const jatt =({
//       CompanyName,
//       loadNumber,
//       loadPrice,
//       loadPickup,
//       loadDropoff,
//       loadLumper,
//       loadBOL,
//       loadInvoice,
//     })
//     // Find the load by ID and update its properties
//     const updatedProduct = await Product.findByIdAndUpdate(
//       id_,
//       jatt,
//       { new: true }
//     );
//     console.log('jatt');

//     res.status(200).json(updatedProduct);

//   } catch (error) {
//     console.error(error);
//     res.status(500).json({ error: "Server error" });
//   }
// };

export const updateLoad = async (req, res) => {

console.log('hi');
  print('bitch')
  try {
    const { loadId } = req.params;
    const updatedFields = req.body;

    const load = await Product.findById(loadId);

    if (!load) {
      return res.status(404).json({ error: "Load not found" });
    }

    Object.assign(load, updatedFields);

    await load.save();

    res.json(load);
  } catch (error) {
    console.log(error);
    res.status(500).json({ error: "Internal server error" });
  }
};



export const updatePost = async (req, res) => {
  const { id: _id } = req.params
  const post = req.body

  if (!mongoose.Types.ObjectId.isValid(_id))
    return res.status(404).send('No post with that id!')

  try {
    const updatedPost = await Product.findByIdAndUpdate(
      _id,
      { ...post, _id },
      {
        new: true,
      }
    )

    res.status(200).json(updatedPost)
  } catch (error) {
    //FIXME: check this after, be sure for correct status code returned
    res.status(409).json({ message: error })
  }
}






export const getTransactions = async (req, res) => {
  try {
    // sort should look like this: { "field": "userId", "sort": "desc"}
    const { page = 1, pageSize = 20, sort = null, search = "" } = req.query;

    // formatted sort should look like { userId: -1 }
    const generateSort = () => {
      const sortParsed = JSON.parse(sort);
      const sortFormatted = {
        [sortParsed.field]: (sortParsed.sort = "asc" ? 1 : -1),
      };

      return sortFormatted;
    };
    const sortFormatted = Boolean(sort) ? generateSort() : {};

    const transactions = await Transaction.find({
      $or: [
        { cost: { $regex: new RegExp(search, "i") } },
        { userId: { $regex: new RegExp(search, "i") } },
      ],
    })
      .sort(sortFormatted)
      .skip(page * pageSize)
      .limit(pageSize);

    const total = await Transaction.countDocuments({
      name: { $regex: search, $options: "i" },
    });

    res.status(200).json({
      transactions,
      total,
    });
  } catch (error) {
    res.status(404).json({ message: error.message });
  }
};

export const getGeography = async (req, res) => {
  try {
    const users = await User.find();

    const mappedLocations = users.reduce((acc, { country }) => {
      const countryISO3 = getCountryIso3(country);
      if (!acc[countryISO3]) {
        acc[countryISO3] = 0;
      }
      acc[countryISO3]++;
      return acc;
    }, {});

    const formattedLocations = Object.entries(mappedLocations).map(
      ([country, count]) => {
        return { id: country, value: count };
      }
    );

    res.status(200).json(formattedLocations);
  } catch (error) {
    res.status(404).json({ message: error.message });
  }
};











